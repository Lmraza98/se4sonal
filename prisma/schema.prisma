generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstname    String
  lastName     String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cart         Cart? // No need for @relation attribute here
  cartId       Int? // Add this line
}

model PurchaseOrder {
  id          Int       @id @default(autoincrement())
  userId      Int
  orderStatus String
  products    Product[] @relation("ProductPurchaseOrders")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id             Int             @id @default(autoincrement())
  name           String
  description    String
  stock          Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  active         Boolean         @default(true)
  purchaseOrders PurchaseOrder[] @relation("ProductPurchaseOrders")
  productSizeIds Int[]
  sizes          ProductSize[]   @relation("ProductSizes")
  priceId        Int
  price          Price           @relation("ProductToPrice", fields: [priceId], references: [id])
  capsuleId      Int
  capsule        Capsule         @relation("ProductToCapsule", fields: [capsuleId], references: [id])
  categoryId     Int
  category       Category        @relation("ProductToCategory", fields: [categoryId], references: [id])
  mainImageId    Int             @unique
  mainImage      ProductImage    @relation("MainImage", fields: [mainImageId], references: [id])
  images         ProductImage[]  @relation("AdditionalImages")
  carts          Cart[]          @relation("ProductCarts")

  @@index([name, capsuleId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  imageId   Int
  productId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image    @relation(fields: [imageId], references: [id])

  productAsMain Product? @relation("MainImage")

  product Product? @relation("AdditionalImages", fields: [productId], references: [id])

  @@index([productId, imageId])
}

model Image {
  id        Int            @id @default(autoincrement())
  name      String
  url       String
  fileName  String
  fileSize  Int
  fileKey   String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  images    ProductImage[]

  @@index([id])
}

model Cart {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  products  Product[] @relation("ProductCarts")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Capsule {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("ProductToCapsule")
}

model Size {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  productSize ProductSize[]

  @@index([name])
}

model ProductSize {
  id        Int  @id @default(autoincrement())
  productId Int?
  sizeId    Int

  products Product[] @relation("ProductSizes")
  size     Size      @relation(fields: [sizeId], references: [id])

  // @@id([productId, sizeId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  products    Product[] @relation("ProductToCategory")

  @@index([name])
}

model Price {
  id          Int       @id @default(autoincrement())
  name        String?
  // price       Float
  unitAmmount Int
  currency    String
  stripeId    String?
  // description String
  products    Product[] @relation("ProductToPrice")
}

model OrdersTable {
  id          Int      @id @default(autoincrement())
  userId      Int
  orderStatus String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model OrderItems {
  id              Int      @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  priceAtPurchase Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model PaymentInfoTable {
  id             Int      @id @default(autoincrement())
  userId         Int
  cardNumber     String
  cardHolderName String
  expirationDate String
  cvv            String
  billingAddress String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model ShippingInfoTable {
  id        Int      @id @default(autoincrement())
  userId    Int
  address   String
  city      String
  state     String
  zip       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model InventoryLogTable {
  id            Int      @id @default(autoincrement())
  productId     Int
  changeInStock Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productId])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  author    String
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([title])
}
